import requests
from ANNIEMUSIC import app
import time
from pyrogram.enums import ChatAction, ParseMode
from pyrogram import filters
from MukeshAPI import api

def reply_to_owner_query(query):
    recognized_queries = [
        "hello yumi who is your owner",
        "hello yumi tumhara malik kon h",
        "hello yumi who is your owner?",
        "hello yumi tumhara malik kon h?"
    ]
    
    normalized_query = query.strip().lower()
    
    if normalized_query in recognized_queries:
        response = {
            "message": ("My Owner Name is Miss Anjali. You Can Call Her Anjali also.\n"
                        "‡§Æ‡•á‡§∞‡§æ ‡§Æ‡§æ‡§≤‡§ï‡§ø‡§® ‡§ï‡§æ ‡§®‡§æ‡§Æ Anjali ‡§π‡•à‡•§ ‡§Ü‡§™ ‡§â‡§®‡§ï‡•ã ‡§∏‡§ø‡§∞‡•ç‡§´ Anju ‡§≠‡•Ä ‡§ï‡§π ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§")
        }
    else:
        response = {
            "message": "Message not recognized."
        }
    
    return response

@app.on_message(filters.command(["chatgpt", "ai", "ask", "arvis", "umi"], prefixes=[".", "J", "j", "y", "Y", "/"]))
async def chat_gpt(bot, message):
    try:
        await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        
        # Check if name is defined, if not, set a default value
        name = message.from_user.first_name if message.from_user else "User"
        
        if len(message.command) < 2:
            await message.reply_text(f"ùêáùêûùê•ùê•ùê®! {name}, ùêáùê®ùê∞ ùêÇùêöùêß ùêà ùêáùêûùê•ùê© ùêòùê®ùêÆ ùêìùê®ùêùùêöùê≤?")
        else:
            query = message.text.split(' ', 1)[1]
            
            # Check for owner query
            owner_response = reply_to_owner_query(query)
            if owner_response["message"] != "Message not recognized.":
                await message.reply_text(
                    f"{owner_response['message']}\n·¥Ä…¥s·¥°·¥á Ä…™…¥…¢  ô è ‚ûõ  @TheAnjaliBot \n·¥Äs·¥ã·¥á·¥Ö  ô è ‚ûõ {name}", 
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                # Use the external API for other queries
                response = api.gemini(query)["results"]
                await message.reply_text(
                    f"{response}\n·¥Ä…¥s·¥°·¥á Ä…™…¥…¢  ô è ‚ûõ  @TheAnjaliBot \n·¥Äs·¥ã·¥á·¥Ö  ô è ‚ûõ {name}", 
                    parse_mode=ParseMode.MARKDOWN
                )
    except Exception as e:
        await message.reply_text(f"**Error: {e}**")
